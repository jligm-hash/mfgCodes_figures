y = PC2,
group = group), alpha = 0.1) +
theme_classic() +
scale_color_viridis() +
labs(col = 'Tumor marker expression')
ggplot() +
geom_point(oldPcaDf, mapping = aes(x = PC1,
y = PC2,
col = colSums(mgMatrix))) +
# geom_point(resPca2, mapping = aes(x = PC1,
# geom_point(newPcaDf, mapping = aes(x = PC1,
#                                                 y = PC2), col = 'red', alpha = 0.5) +
geom_line(lineDf, arrow = arrow(ends="first", length = unit(0.2, 'cm')), mapping = aes(x = PC1,
y = PC2,
group = group), alpha = 0.1) +
theme_classic() +
scale_color_viridis() +
labs(col = 'Tumor marker expression')
ggplot() +
geom_point(oldPcaDf, mapping = aes(x = PC1,
y = PC2,
col = colSums(mgMatrix))) +
# geom_point(resPca2, mapping = aes(x = PC1,
# geom_point(newPcaDf, mapping = aes(x = PC1,
#                                                 y = PC2), col = 'red', alpha = 0.5) +
# geom_line(lineDf, arrow = arrow(ends="first", length = unit(0.2, 'cm')), mapping = aes(x = PC1,
#                                 y = PC2,
#                                 group = group), alpha = 0.1) +
theme_classic() +
scale_color_viridis() +
labs(col = 'Tumor marker expression')
ggplot() +
# geom_point(oldPcaDf, mapping = aes(x = PC1,
#                                                y = PC2,
#                                                col = colSums(mgMatrix))) +
geom_point(newPcaDf, mapping = aes(x = PC1,
y = PC2,
col = colSums(mgMatrixDfNew))) +
# geom_point(resPca2, mapping = aes(x = PC1,
# geom_point(newPcaDf, mapping = aes(x = PC1,
#                                                 y = PC2), col = 'red', alpha = 0.5) +
# geom_line(lineDf, arrow = arrow(ends="first", length = unit(0.2, 'cm')), mapping = aes(x = PC1,
#                                 y = PC2,
#                                 group = group), alpha = 0.1) +
theme_classic() +
scale_color_viridis() +
labs(col = 'Tumor marker expression')
ggplot() +
# geom_point(oldPcaDf, mapping = aes(x = PC1,
#                                                y = PC2,
#                                                col = colSums(mgMatrix))) +
geom_point(newPcaDf, mapping = aes(x = PC1,
y = PC2,
col = 'red')) +
# geom_point(resPca2, mapping = aes(x = PC1,
# geom_point(newPcaDf, mapping = aes(x = PC1,
#                                                 y = PC2), col = 'red', alpha = 0.5) +
# geom_line(lineDf, arrow = arrow(ends="first", length = unit(0.2, 'cm')), mapping = aes(x = PC1,
#                                 y = PC2,
#                                 group = group), alpha = 0.1) +
theme_classic() +
scale_color_viridis() +
labs(col = 'Tumor marker expression')
ggplot() +
# geom_point(oldPcaDf, mapping = aes(x = PC1,
#                                                y = PC2,
#                                                col = colSums(mgMatrix))) +
geom_point(newPcaDf, mapping = aes(x = PC1,
y = PC2)) +
# geom_point(resPca2, mapping = aes(x = PC1,
# geom_point(newPcaDf, mapping = aes(x = PC1,
#                                                 y = PC2), col = 'red', alpha = 0.5) +
# geom_line(lineDf, arrow = arrow(ends="first", length = unit(0.2, 'cm')), mapping = aes(x = PC1,
#                                 y = PC2,
#                                 group = group), alpha = 0.1) +
theme_classic() +
scale_color_viridis() +
labs(col = 'Tumor marker expression')
ggplot() +
# geom_point(oldPcaDf, mapping = aes(x = PC1,
#                                                y = PC2,
#                                                col = colSums(mgMatrix))) +
geom_point(newPcaDf, mapping = aes(x = PC1,
y = PC2), col = 'red') +
# geom_point(resPca2, mapping = aes(x = PC1,
# geom_point(newPcaDf, mapping = aes(x = PC1,
#                                                 y = PC2), col = 'red', alpha = 0.5) +
# geom_line(lineDf, arrow = arrow(ends="first", length = unit(0.2, 'cm')), mapping = aes(x = PC1,
#                                 y = PC2,
#                                 group = group), alpha = 0.1) +
theme_classic() +
scale_color_viridis() +
labs(col = 'Tumor marker expression')
ggplot() +
# geom_point(oldPcaDf, mapping = aes(x = PC1,
#                                                y = PC2,
#                                                col = colSums(mgMatrix))) +
geom_point(newPcaDf, mapping = aes(x = PC1,
y = PC2), col = 'red', alpha=0.5) +
# geom_point(resPca2, mapping = aes(x = PC1,
# geom_point(newPcaDf, mapping = aes(x = PC1,
#                                                 y = PC2), col = 'red', alpha = 0.5) +
# geom_line(lineDf, arrow = arrow(ends="first", length = unit(0.2, 'cm')), mapping = aes(x = PC1,
#                                 y = PC2,
#                                 group = group), alpha = 0.1) +
theme_classic() +
scale_color_viridis() +
labs(col = 'Tumor marker expression')
# i = 1 # for debug
resFit4markerName = c()
resFit4slope = c()
resFit4intercept = c()
resFit4corEstimate = c()
resFit4pValue = c()
resPltArr = c()
for (i in 1:length(tumorMarkerList)){
lmDf = data.frame(x = resMgDf[rownames(resMgDf) == 'CD74',],
y = resMgDf[rownames(resMgDf) == tumorMarkerList[i],])
lmDf = lmDf[lmDf$x > 0, ]
lmDf = lmDf[lmDf$y > 0, ]
lmDf$y = log(lmDf$y)
lmRes = lm(y ~ x, data = lmDf)
corRes = cor.test(lmDf$x, lmDf$y)
resPvalue = corRes$p.value
resCorCoefficient = corRes$estimate
resIntercept = lmRes$coefficients[[1]]
resSlope = lmRes$coefficients[[2]]
fitX = seq(min(lmDf$x), max(lmDf$x), by = 0.5)
fitY = fitX *resSlope + resIntercept
fitDf = data.frame(x = fitX,
y = fitY)
resFit4markerName = c(resFit4markerName, tumorMarkerList[i])
resFit4slope = c(resFit4slope, resSlope)
resFit4intercept = c(resFit4intercept, resIntercept)
resFit4corEstimate = c(resFit4corEstimate, resCorCoefficient)
resFit4pValue = c(resFit4pValue, resPvalue)
p = ggplot() +
geom_point(lmDf, mapping = aes(x = x,
y = y)) +
geom_point(fitDf, mapping = aes(x = x,
y = y), col = 'red') +
theme_classic() +
labs(x = 'CD74',
y = '',
title = tumorMarkerList[i],
subtitle = paste0('cor= ', signif(resCorCoefficient, digits = 3),
',p= ', signif(resPvalue, digits = 3)))
resPltArr[[i]] = p
}
library(ggpubr)
length(resPltArr)
ggarrange(plotlist = resPltArr, ncol = 5, nrow = 4)
library(pheatmap)
pheatmap(mgMatrixDf)
pheatmap(mgMatrixDf, cluster_cols = F, cluster_rows = F)
pheatmap(mgMatrixDf, cluster_cols = F, cluster_rows = F, show_colnames = F)
pheatmap(mgMatrixDf, cluster_cols = F, cluster_rows = F, show_colnames = F,
color = c('white', 'red'))
library(RColorBrewer)
breaksList = seq(0, 45, by = 1)
pheatmap(mgMatrixDf, cluster_cols = F, cluster_rows = F, show_colnames = F,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYlBu")))(length(breaksList)),
breaks = breaksList)
pheatmap(mgMatrixDf, cluster_cols = F, cluster_rows = F, show_colnames = F,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "RdYl")))(length(breaksList)),
breaks = breaksList)
?brewer.pal
pheatmap(mgMatrixDf, cluster_cols = F, cluster_rows = F, show_colnames = F,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "PuRd")))(length(breaksList)),
breaks = breaksList)
pheatmap(mgMatrixDf, cluster_cols = F, cluster_rows = F, show_colnames = F,
color = colorRampPalette(rev(brewer.pal(n = 7, name = "Oranges")))(length(breaksList)),
breaks = breaksList)
pheatmap(mgMatrixDf, cluster_cols = F, cluster_rows = F, show_colnames = F,
color = colorRampPalette((brewer.pal(n = 7, name = "Oranges")))(length(breaksList)),
breaks = breaksList)
pheatmap(mgMatrixDf, cluster_cols = F, cluster_rows = F, show_colnames = F,
color = colorRampPalette((brewer.pal(n = 7, name = "RdPu")))(length(breaksList)),
breaks = breaksList)
pheatmap(log(mgMatrixDf+1), cluster_cols = F, cluster_rows = F, show_colnames = F,
color = colorRampPalette((brewer.pal(n = 7, name = "RdPu")))(length(breaksList)),
breaks = breaksList)
max(log(mgMatrixDf+1))
breaksList = seq(0, 4, by = 0.1)
pheatmap(log(mgMatrixDf+1), cluster_cols = F, cluster_rows = F, show_colnames = F,
color = colorRampPalette((brewer.pal(n = 7, name = "RdPu")))(length(breaksList)),
breaks = breaksList)
pheatmap(log(mgMatrixDfNew+1), cluster_cols = F, cluster_rows = F, show_colnames = F,
color = colorRampPalette((brewer.pal(n = 7, name = "RdPu")))(length(breaksList)),
breaks = breaksList)
BiocManager::install("biomaRt")
library(biomaRt)
listEnsembl()
BiocManager::install(version = "3.18")
BiocManager::install("biomaRt", force = T)
targetBenefit = 2
benefitRate = 0.05
(1+benefitRate)
log2(1+benefitRate)/log2(2)
log2(2)/log2(1+benefitRate)
benefitRate = 0.38
log2(2)/log2(1+benefitRate)
benefitRate = 0.038
log2(2)/log2(1+benefitRate)
2^(1/20)-1
# target benefit, time -> benefit rate
setTime = 20
targetBenefit^(1/setTime)-1
setwd("/Users/jiabao/Documents/1_github/mfgCodes/code4figs24112001/fig3")
# load the library
library(data.table)
library(progress)
library(abc)
library(ggplot2)
library(ComplexHeatmap)
library(circlize)
library(ggsci)
library(scico)
pltList = c()
pltFigureCount = 0
setTolerance = 0.1
{
# read the big small for the mgbm patient
bigSmallLabelPwd = './mgbmSgbmLabel.csv'
bigSmallDf = data.frame(fread(bigSmallLabelPwd))
bigSmallDf = bigSmallDf[bigSmallDf$bigSmall != 'SGBM',]
# then use the match function to draw the boxplot
{
# define the function
myListToCol = function(x){
# table(x)
ColDf = data.frame(col = table(x))
colnames(ColDf) = c('Value', 'Freq')
ColDf$Col = rainbow(dim(ColDf)[1])
return(ColDf$Col[match(x, ColDf$Value)])
}
myListToLog10 = function(x){
return(ifelse(x==0, 0, log10(x)))
}
#! extract the color code from the scale fill function
nColOfGgsci = 7
p = ggplot(data.frame(x = 1:nColOfGgsci,
y = 1:nColOfGgsci),
mapping = aes(x = x,
y = y,
col =  as.factor(x))) +
geom_point() +
scale_color_startrek()
g = ggplot_build(p)
sci7ColArr = unique(g$data[[1]]["colour"])[[1]]
sci7ColArrOrder = sci7ColArr[c(6,5,4,3,2,1,7)]
load(file = './readSimV134.RData')
dim(resSimAll)
colnames(resSimAll)
resSimAll$migr = resSimAll$migr/1e3 # in the nich level
realSizeDf = data.frame(fread('./realTCGA211017.csv'))
dim(realSizeDf)
realSizeDf[is.na(realSizeDf)] = 'Unknown'
dim(realSizeDf)
resSimAll
obsDat = realSizeDf[,c('Num', paste0('T',1:6))]
patientName = realSizeDf$ID
obsDat[1,]
# define the sim dat, remove the lesion number no more than 1
simDat = resSimAll[resSimAll$num>=1,]
simDat[is.na(simDat)] = 0
# our method --------------------------------------------------------------
myMad = function(x){
return(median(1/qnorm(3/4)*abs(x-median(x))))
}
myAbcPr = function(setTarget, setSimulation, setLabel, setTol){
# to set the target, set the simulation, set the label, set the tolerance
target = setTarget
sim = setSimulation
modelLabel1 = as.factor(setLabel)
tol = setTol
resMad = c()
for (i in 1:ncol(sim)) {
madF = myMad(as.numeric(sim[,i]))
madF = ifelse(madF==0, 1, madF)
resMad = c(resMad, madF)
}
target.scale = target
sim.scale = sim
for (i in 1:ncol(sim)) {
target.scale[,i] = target[,i] / resMad[i]
sim.scale[,i] = sim[,i] / resMad[i]
}
# calculate dist
resDist = 0
for (i in 1:ncol(sim.scale)) {
resDist.tmp = (sim.scale[,i] - target.scale[,i]) ^2
resDist = resDist + resDist.tmp
}
ntol = ceiling(nrow(sim.scale) * tol)
cutOffN = sort(resDist)[ntol]
postRindex = resDist <= cutOffN
resTmpDf = aggregate(rank(-resDist[postRindex]),
by=list(label = modelLabel1[postRindex]), FUN=sum)
resTmpDf = resTmpDf[order(resTmpDf$label),]
tabTmp = table(modelLabel1[postRindex])
for (i in 1:dim(resTmpDf)[1]) {
tabTmp[names(tabTmp) == resTmpDf$label[i]] = resTmpDf$x[i]
}
return(prop.table(tabTmp))
}
myAbcPrBestSim = function(setTarget, setSimulation, setLabel, setTol){
# to set the target, set the simulation, set the label, set the tolerance
# return the index for the best simulation
target = setTarget
sim = setSimulation
modelLabel1 = as.factor(setLabel)
tol = setTol
resMad = c()
for (i in 1:ncol(sim)) {
madF = myMad(as.numeric(sim[,i]))
madF = ifelse(madF==0, 1, madF)
resMad = c(resMad, madF)
}
target.scale = target
sim.scale = sim
for (i in 1:ncol(sim)) {
target.scale[,i] = target[,i] / resMad[i]
sim.scale[,i] = sim[,i] / resMad[i]
}
# calculate dist
resDist = 0
for (i in 1:ncol(sim.scale)) {
resDist.tmp = (sim.scale[,i] - target.scale[,i]) ^2
resDist = resDist + resDist.tmp
}
ntol = ceiling(nrow(sim.scale) * tol)
cutOffN = sort(resDist)[ntol]
postRindex = resDist <= cutOffN
# resTmpDf = aggregate(rank(-resDist[postRindex]),
#                      by=list(label = modelLabel1[postRindex]), FUN=sum)
# resTmpDf = resTmpDf[order(resTmpDf$label),]
#
# tabTmp = table(modelLabel1[postRindex])
#
# for (i in 1:dim(resTmpDf)[1]) {
#   tabTmp[names(tabTmp) == resTmpDf$label[i]] = resTmpDf$x[i]
# }
return(postRindex)
}
myResMad = function(setTarget, setSimulation){
# to set the target, set the simulation, set the label, set the tolerance
target = setTarget
sim = setSimulation
resMad = c()
for (i in 1:ncol(sim)) {
madF = myMad(as.numeric(sim[,i]))
madF = ifelse(madF==0, 1, madF)
resMad = c(resMad, madF)
}
return(resMad)
}
# call postr --------------------------------------------------------------
simDatOnly = simDat
simDatOnly[, paste0('P',1:10)] = 100 * simDatOnly[, paste0('P',1:10)]
unique(simDatOnly$migr)
unique(simDatOnly$select)
unique(simDatOnly$distMigrDrvNum)
# # check scale for target real data, simulation
pb = progress_bar$new(total = length(patientName), clear = FALSE)
rm(resPostAllBest)
for (i in 1:length(patientName)) {
pb$tick()
resPost = myAbcPrBestSim(setTarget = obsDat[i,1:7],
setSimulation = simDatOnly[,c('num', paste0('P',1:6))],
setLabel = simDatOnly$migr,
setTol =setTolerance)
tmpPostRes = simDatOnly[resPost,]
tmpPostRes$patientId = patientName[i]
if(i == 1){
resPostAllBest = tmpPostRes
}else{
resPostAllBest = rbind(resPostAllBest, tmpPostRes)
}
}
# resPostAllBest
# match the big/small label for the best simulation
resPostAllBest$group = bigSmallDf$bigSmall[match(resPostAllBest$patientId,
bigSmallDf$ID)]
}
library(ggpubr)
my_comparison = list(c(1, 2))
colnames(resPostAllBest)
# calculate the migration mean for all the patient
resMean = c()
for (i in 1:length(patientName)) {
tmpRes = mean(resPostAllBest$firstMigrNum[resPostAllBest$patientId == patientName[i]])
resMean = c(resMean, tmpRes)
}
resMeanDf4bigSmall = data.frame(firstMigrNumMean = resMean,
patientId = patientName)
resMeanDf4bigSmall$group = bigSmallDf$bigSmall[match(resMeanDf4bigSmall$patientId,
bigSmallDf$ID)]
library(ggbeeswarm)
# fig3g
ggplot(resMeanDf4bigSmall, mapping = aes(x = group,
y = firstMigrNumMean,
col = group)) +
geom_boxplot(width = 0.3, outlier.shape = NA) +
geom_beeswarm(cex = 3, size=0.5) +
theme_classic() +
theme(
plot.title = element_text(hjust = 0.5),
) +
stat_compare_means(comparisons = my_comparison) +
scale_color_brewer(palette = 'Set1') +
guides(col = 'none') +
labs(title = paste0('Tolerance = ', setTolerance))
}
# fig3g
ggplot(resMeanDf4bigSmall, mapping = aes(x = group,
y = firstMigrNumMean,
col = group)) +
geom_boxplot(width = 0.3, outlier.shape = NA) +
geom_beeswarm(cex = 3, size=0.5, alpha = 0.8) +
theme_classic() +
theme(
plot.title = element_text(hjust = 0.5),
) +
stat_compare_means(comparisons = my_comparison) +
scale_color_brewer(palette = 'Set1') +
guides(col = 'none') +
labs(title = paste0('Tolerance = ', setTolerance))
# mean migr vs big/small group
resMean4migr = c()
for (i in 1:length(patientName)) {
tmpRes = mean(resPostAllBest$migr[resPostAllBest$patientId == patientName[i]])
resMean4migr = c(resMean4migr, tmpRes)
}
resMeanDf4bigSmall4migr = data.frame(migrMean = resMean4migr,
patientId = patientName)
resMeanDf4bigSmall4migr$group = bigSmallDf$bigSmall[match(resMeanDf4bigSmall4migr$patientId, bigSmallDf$ID)]
# fig 3f
ggplot(resMeanDf4bigSmall4migr, mapping = aes(x = group,
y = migrMean,
col = group)) +
geom_boxplot(width = 0.3, outlier.shape = NA) +
geom_beeswarm(cex = 3, size = 0.5) +
theme_classic() +
theme(
plot.title = element_text(hjust = 0.5),
)+
stat_compare_means(comparisons = my_comparison) +
scale_color_brewer(palette = 'Set1') +
guides(col = 'none') +
labs(title = paste0('Tolerance = ', setTolerance)) +
scale_y_continuous(limits = c(0, 7e-8))
# fig 3f
ggplot(resMeanDf4bigSmall4migr, mapping = aes(x = group,
y = migrMean,
col = group)) +
geom_boxplot(width = 0.3, outlier.shape = NA) +
geom_beeswarm(cex = 3, size = 0.5, alpha = 0.8) +
theme_classic() +
theme(
plot.title = element_text(hjust = 0.5),
)+
stat_compare_means(comparisons = my_comparison) +
scale_color_brewer(palette = 'Set1') +
guides(col = 'none') +
labs(title = paste0('Tolerance = ', setTolerance)) +
scale_y_continuous(limits = c(0, 7e-8))
library(ggplot2)
library(ggbeeswarm)
library(ggpubr)
library(fgsea)
library(pheatmap)
library(ggrepel)
library(RColorBrewer)
library(fgsea)
library(clusterProfiler)
library(enrichplot)
# set the file pwd
source('./plotfgsea.R')
idh = read.delim('./TCGA_GBM_MRI259_IDH.txt')
mdp = read.delim('./gbm_tcga_data_clinical_patient.txt',   comment.char = '#',   na.strings = c('',  '[Not Available]'))
mds = read.delim('./gbm_tcga_data_clinical_sample.txt',   comment.char = '#')
fg = read.delim('./gbm_tcga_data_clinical_patient.txt',  comment.char = '#')
cl = read.csv('./mgbmSgbmLabel.csv')
cl = cl[which(cl$modality == 'MR'),  ]
cl$IDH = idh$IDH.status[match(cl$ID,   idh$Patient)]
l2b = cl$ID[cl$bigSmall == 'Big']
l2s = cl$ID[cl$bigSmall == 'Small']
l1 = cl$ID[cl$bigSmall == 'SGBM'&cl$IDH == 'WT']
##copy number
cna0 = read.delim('./gbm_tcga_data_cna.txt',
check.names = F)
gns = c('EGFR',  'PDGFRA',  'CDK4',  'MDM2',  'PIK3CA',  'CDKN2A')
cna = cna0[cna0$Hugo_Symbol %in%gns,   names(cna0) %in% c('Hugo_Symbol',  paste0(c(l2b,  l2s),  '-01'))]
#somatic mutation
mut0 = read.delim('./gbm_tcga_data_mutations.txt')
mut01 = mut0[mut0$Tumor_Sample_Barcode %in% c('Hugo_Symbol',  paste0(c(l2b,  l2s),  '-01')),  ]
mut01 = mut01[mut01$Variant_Classification!='Silent',   ]
nmut = as.data.frame(table(mut01$Tumor_Sample_Barcode))
nmut$type = ifelse(nmut$Var1 %in% paste0(l2b,  '-01'),   'L2-large',   'L2-small')
mds = mds[mds$PATIENT_ID %in% c(l2b, l2s), ]
mds$type = ifelse(mds$PATIENT_ID %in% l2b, 'L2-large', 'L2-small')
ggplot(mds,  aes(x = type ,  y = TMB_NONSYNONYMOUS,
col = type))  +
geom_boxplot(outlier.shape = NA, width = 0.35) +
geom_beeswarm(cex = 3, size = 0.5) +
stat_compare_means(comparisons = list(c('L2-large', 'L2-small')), label = 'p.format')  +
scale_color_manual(values = c('#e31a1c', '#377eb8')) +
theme_classic()  +
labs(x = '',  y = 'somatic mutation burden') +
guides(col = 'none') +
theme(text = element_text(size = 15))
